#!/usr/bin/env python3
"""
Daily Vulnerability Report Generation Script (With Sara's AI Analysis)
Runs at 5am daily to generate vulnerability intelligence reports using Sara's full AI analysis
Uses the proper API endpoint for beautiful reports with AI-generated insights
"""

import asyncio
import aiohttp
import logging
import os
import sys
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/home/david/jarvis/logs/vulnerability_reports.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration
API_BASE_URL = os.getenv("API_BASE_URL", "http://10.185.1.180:8000")
USER_EMAIL = os.getenv("SARA_USER_EMAIL", "david@avery.cloud")
USER_PASSWORD = os.getenv("SARA_USER_PASSWORD", "")

async def authenticate_and_generate_report():
    """Authenticate with Sara Hub API and generate vulnerability report"""
    
    if not USER_PASSWORD:
        logger.error("SARA_USER_PASSWORD environment variable not set")
        return False
    
    # Create a cookie jar to maintain session
    cookie_jar = aiohttp.CookieJar()
    
    async with aiohttp.ClientSession(
        timeout=aiohttp.ClientTimeout(total=300),  # 5 minute timeout
        cookie_jar=cookie_jar
    ) as session:
        try:
            # Step 1: Authenticate
            logger.info("üîê Authenticating with Sara Hub...")
            auth_payload = {
                "email": USER_EMAIL,
                "password": USER_PASSWORD
            }
            
            async with session.post(
                f"{API_BASE_URL}/auth/login",
                json=auth_payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"Authentication failed: {response.status} - {error_text}")
                    return False
                
                auth_data = await response.json()
                logger.info(f"‚úÖ Authenticated as {auth_data.get('email', 'unknown')}")
                
                # Extract access token for API calls
                access_token = auth_data.get('access_token')
                if not access_token:
                    logger.error("No access token received from login")
                    return False
                
                logger.info("üîë Access token received")
            
            # Step 2: Generate vulnerability report
            logger.info("üöÄ Generating vulnerability report...")
            async with session.post(
                f"{API_BASE_URL}/api/vulnerability-reports/generate",
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {access_token}"
                }
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"‚úÖ Report generated successfully!")
                    logger.info(f"   üìä Total vulnerabilities: {result.get('vulnerabilities_count', 0)}")
                    logger.info(f"   üö® Critical: {result.get('critical_count', 0)}")
                    logger.info(f"   ‚ö†Ô∏è  KEV: {result.get('kev_count', 0)}")
                    logger.info(f"   üì± Notification sent: {result.get('notification_sent', False)}")
                    return True
                else:
                    error_text = await response.text()
                    try:
                        error_data = await response.json()
                        error_message = error_data.get('detail', error_text)
                    except:
                        error_message = error_text
                    
                    if response.status == 200 and "already exists" in error_message:
                        logger.info(f"‚ÑπÔ∏è  Report already exists for today")
                        return True
                    else:
                        logger.error(f"Report generation failed: {response.status} - {error_message}")
                        return False
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå Request timed out")
            return False
        except Exception as e:
            logger.error(f"‚ùå Unexpected error: {e}")
            return False

def main():
    """Main entry point"""
    start_time = datetime.now()
    logger.info(f"üåÖ Starting daily vulnerability report generation at {start_time}")
    
    try:
        # Run the async report generation
        success = asyncio.run(authenticate_and_generate_report())
        
        end_time = datetime.now()
        duration = end_time - start_time
        
        if success:
            logger.info(f"üéâ Daily vulnerability report generation completed successfully in {duration.total_seconds():.2f} seconds")
            sys.exit(0)
        else:
            logger.error(f"‚ùå Daily vulnerability report generation failed after {duration.total_seconds():.2f} seconds")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Report generation interrupted by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• Fatal error in vulnerability report generation: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()