"""
Vulnerability Notifications Service - Handles NTFY notifications for vulnerability reports
"""

import asyncio
import aiohttp
import json
import logging
from typing import Optional, Dict, Any
from datetime import datetime

logger = logging.getLogger(__name__)

class VulnerabilityNotificationService:
    """Handles NTFY notifications for vulnerability reports"""
    
    def __init__(self, ntfy_server_url: str, topic: str, enabled: bool = True):
        self.ntfy_server_url = ntfy_server_url.rstrip('/')
        self.topic = topic
        self.enabled = enabled
    
    async def send_report_ready_notification(self, report_title: str, summary: str) -> bool:
        """Send notification when daily vulnerability report is ready"""
        if not self.enabled:
            logger.info("NTFY notifications disabled, skipping report ready notification")
            return False
        
        title = "📊 Vulnerability Report Ready"
        message = f"{report_title}\n\n{summary}\n\nTap to view in Sara Hub"
        
        return await self._send_notification(
            title=title,
            message=message,
            priority=3,  # Normal priority
            tags=["shield", "chart_with_upwards_trend"],
            actions=[
                {
                    "action": "view",
                    "label": "Open Sara Hub",
                    "url": "https://sara.avery.cloud/vulnerability-watch"
                }
            ]
        )
    
    async def send_critical_vulnerability_notification(self, cve_id: str, title: str, severity: str, known_exploited: bool = False) -> bool:
        """Send notification for critical vulnerability discovery"""
        if not self.enabled:
            logger.info("NTFY notifications disabled, skipping critical vulnerability notification")
            return False
        
        # Determine priority and emoji based on criticality
        if known_exploited:
            emoji = "🚨"
            priority = 5  # Max priority
            notification_title = f"{emoji} EXPLOITED VULNERABILITY"
            tags = ["rotating_light", "skull"]
        elif severity == "Critical":
            emoji = "⚠️"
            priority = 4  # High priority
            notification_title = f"{emoji} CRITICAL VULNERABILITY"
            tags = ["warning", "shield"]
        else:
            emoji = "🔍"
            priority = 3  # Normal priority
            notification_title = f"{emoji} NEW VULNERABILITY"
            tags = ["mag", "shield"]
        
        message = f"{cve_id}: {title}\n\nSeverity: {severity}"
        if known_exploited:
            message += "\n\n🔴 ACTIVELY EXPLOITED IN THE WILD"
        
        return await self._send_notification(
            title=notification_title,
            message=message,
            priority=priority,
            tags=tags,
            actions=[
                {
                    "action": "view",
                    "label": "View Details",
                    "url": "https://sara.avery.cloud/vulnerability-watch"
                }
            ]
        )
    
    async def _send_notification(self, title: str, message: str, priority: int = 3, 
                               tags: list = None, actions: list = None) -> bool:
        """Send a notification via NTFY"""
        if not self.enabled:
            return False
        
        url = f"{self.ntfy_server_url}/{self.topic}"
        
        headers = {
            "Title": title,
            "Priority": str(priority),
            "Content-Type": "text/plain"
        }
        
        if tags:
            headers["Tags"] = ",".join(tags)
        
        if actions:
            headers["Actions"] = json.dumps(actions)
        
        try:
            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(url, data=message, headers=headers) as response:
                    if response.status == 200:
                        logger.info(f"✅ NTFY notification sent successfully: {title}")
                        return True
                    else:
                        error_text = await response.text()
                        logger.error(f"❌ Failed to send NTFY notification: {response.status} - {error_text}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("❌ NTFY notification timed out")
            return False
        except Exception as e:
            logger.error(f"❌ Error sending NTFY notification: {e}")
            return False
    
    def log_notification(self, notification_type: str, reference_id: str, title: str, 
                        message: str, success: bool, response: str = None):
        """Log notification for debugging (this would typically save to database)"""
        log_entry = {
            "type": notification_type,
            "reference_id": reference_id,
            "title": title,
            "message": message,
            "success": success,
            "timestamp": datetime.now().isoformat(),
            "response": response
        }
        logger.info(f"📝 Notification logged: {json.dumps(log_entry, indent=2)}")


# Convenience functions for easy use in endpoints
async def notify_report_ready(ntfy_service: VulnerabilityNotificationService, 
                            report_title: str, summary: str, report_id: str) -> Dict[str, Any]:
    """Convenience function to send report ready notification"""
    success = await ntfy_service.send_report_ready_notification(report_title, summary)
    
    result = {
        "notification_type": "report_ready",
        "reference_id": report_id,
        "title": "Vulnerability Report Ready",
        "message": f"{report_title}\n{summary}",
        "success": success,
        "timestamp": datetime.now().isoformat()
    }
    
    # Log notification (exclude timestamp as it's added internally)
    log_data = {k: v for k, v in result.items() if k != "timestamp"}
    ntfy_service.log_notification(**log_data)
    return result

async def notify_critical_vulnerability(ntfy_service: VulnerabilityNotificationService,
                                      cve_id: str, title: str, severity: str, 
                                      known_exploited: bool = False) -> Dict[str, Any]:
    """Convenience function to send critical vulnerability notification"""
    success = await ntfy_service.send_critical_vulnerability_notification(
        cve_id, title, severity, known_exploited
    )
    
    result = {
        "notification_type": "critical_vuln",
        "reference_id": cve_id,
        "title": f"Critical Vulnerability: {cve_id}",
        "message": f"{title} - {severity}",
        "success": success,
        "timestamp": datetime.now().isoformat()
    }
    
    # Log notification (exclude timestamp as it's added internally)
    log_data = {k: v for k, v in result.items() if k != "timestamp"}
    ntfy_service.log_notification(**log_data)
    return result