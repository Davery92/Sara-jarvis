import React, { useState, useEffect } from 'react'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism'
import apiClient from '../api/client'

interface VulnerabilityReport {
  id: string
  report_date: string
  title: string
  summary?: string
  content?: string
  vulnerabilities_count: number
  critical_count: number
  kev_count: number
  created_at: string
}

interface VulnerabilityReportList {
  id: string
  report_date: string
  title: string
  summary?: string
  vulnerabilities_count: number
  critical_count: number
  kev_count: number
  created_at: string
}

interface VulnerabilityWatchProps {
  onToast: (message: string, type: 'success' | 'error' | 'info') => void
}

const VulnerabilityWatch: React.FC<VulnerabilityWatchProps> = ({ onToast }) => {
  const [reports, setReports] = useState<VulnerabilityReportList[]>([])
  const [selectedReport, setSelectedReport] = useState<VulnerabilityReport | null>(null)
  const [loading, setLoading] = useState(true)
  const [generating, setGenerating] = useState(false)
  const [collapsedSections, setCollapsedSections] = useState<Set<string>>(new Set())

  useEffect(() => {
    loadReports()
  }, [])

  const loadReports = async () => {
    try {
      const data = await apiClient.getVulnerabilityReports()
      setReports(data)
      // Auto-select the latest report if available
      if (data.length > 0 && !selectedReport) {
        await loadReportContent(data[0].id)
      }
    } catch (error: any) {
      console.error('Error loading vulnerability reports:', error)
      if (error.response?.status === 401) {
        onToast('Please log in to view vulnerability reports', 'error')
      } else {
        onToast('Error loading vulnerability reports', 'error')
      }
    } finally {
      setLoading(false)
    }
  }

  const loadReportContent = async (reportId: string) => {
    try {
      const report = await apiClient.getVulnerabilityReport(reportId)
      setSelectedReport(report)
    } catch (error: any) {
      console.error('Error loading report content:', error)
      if (error.response?.status === 401) {
        onToast('Please log in to view report details', 'error')
      } else {
        onToast('Error loading report details', 'error')
      }
    }
  }

  const generateReport = async () => {
    setGenerating(true)
    try {
      const result = await apiClient.generateVulnerabilityReport()
      onToast(`Report generated: ${result.vulnerabilities_count} vulnerabilities`, 'success')
      await loadReports()
    } catch (error: any) {
      console.error('Error generating report:', error)
      if (error.response?.data?.detail) {
        onToast(error.response.data.detail, 'error')
      } else if (error.response?.status === 401) {
        onToast('Please log in to generate reports', 'error')
      } else {
        onToast('Error generating vulnerability report', 'error')
      }
    } finally {
      setGenerating(false)
    }
  }

  const formatDate = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
      })
    } catch (error) {
      console.error('Error formatting date:', dateString, error)
      return dateString
    }
  }

  const formatDateTime = (dateString: string) => {
    try {
      return new Date(dateString).toLocaleString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    } catch (error) {
      console.error('Error formatting datetime:', dateString, error)
      return dateString
    }
  }

  const toggleSection = (sectionId: string) => {
    const newCollapsed = new Set(collapsedSections)
    if (newCollapsed.has(sectionId)) {
      newCollapsed.delete(sectionId)
    } else {
      newCollapsed.add(sectionId)
    }
    setCollapsedSections(newCollapsed)
  }

  const getPriorityBadge = (report: VulnerabilityReportList | VulnerabilityReport) => {
    if (report.kev_count > 0) {
      return <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-900/50 text-red-200 border border-red-700">
        üö® {report.kev_count} KEV
      </span>
    }
    if (report.critical_count > 0) {
      return <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-900/50 text-orange-200 border border-orange-700">
        ‚ö†Ô∏è {report.critical_count} Critical
      </span>
    }
    return <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700/50 text-gray-300 border border-gray-600">
      üìä {report.vulnerabilities_count} Total
    </span>
  }

  const renderVulnerabilityContent = (content: string) => {
    // Split content by details sections
    const detailsRegex = /<details>\s*<summary><strong>([^<]+)<\/strong><\/summary>([\s\S]*?)<\/details>/g
    const parts: Array<{ type: 'text' | 'collapsible', content: string, title?: string, id?: string }> = []
    
    let lastIndex = 0
    let match
    
    while ((match = detailsRegex.exec(content)) !== null) {
      // Add text before this details section
      if (match.index > lastIndex) {
        const textBefore = content.slice(lastIndex, match.index)
        if (textBefore.trim()) {
          parts.push({ type: 'text', content: textBefore })
        }
      }
      
      // Add the collapsible section
      const title = match[1]
      const sectionContent = match[2]
      const sectionId = `section-${parts.length}`
      
      parts.push({
        type: 'collapsible',
        content: sectionContent,
        title: title,
        id: sectionId
      })
      
      lastIndex = match.index + match[0].length
    }
    
    // Add remaining text
    if (lastIndex < content.length) {
      const remainingText = content.slice(lastIndex)
      if (remainingText.trim()) {
        parts.push({ type: 'text', content: remainingText })
      }
    }
    
    // If no collapsible sections found, render as normal markdown
    if (parts.length === 0 || parts.every(p => p.type === 'text')) {
      return (
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          components={{
            // Enhanced table styling
            table({ children, ...props }) {
              return (
                <div className="overflow-x-auto my-4">
                  <table className="w-full border-collapse border border-gray-600 bg-gray-800/50 rounded-lg" {...props}>
                    {children}
                  </table>
                </div>
              )
            },
            thead({ children, ...props }) {
              return (
                <thead className="bg-gray-700/50" {...props}>
                  {children}
                </thead>
              )
            },
            tbody({ children, ...props }) {
              return (
                <tbody {...props}>
                  {children}
                </tbody>
              )
            },
            tr({ children, ...props }) {
              return (
                <tr className="border-b border-gray-600 hover:bg-gray-700/30" {...props}>
                  {children}
                </tr>
              )
            },
            th({ children, ...props }) {
              return (
                <th className="border border-gray-600 px-3 py-2 text-left font-semibold text-teal-300" {...props}>
                  {children}
                </th>
              )
            },
            td({ children, ...props }) {
              return (
                <td className="border border-gray-600 px-3 py-2 text-gray-300" {...props}>
                  {children}
                </td>
              )
            },
            // Code highlighting
            code({ node, inline, className, children, ...props }) {
              const match = /language-(\w+)/.exec(className || '')
              return !inline && match ? (
                <SyntaxHighlighter
                  style={oneDark}
                  language={match[1]}
                  PreTag="div"
                  {...props}
                >
                  {String(children).replace(/\n$/, '')}
                </SyntaxHighlighter>
              ) : (
                <code className="bg-gray-700/50 px-1 py-0.5 rounded text-teal-300 text-sm" {...props}>
                  {children}
                </code>
              )
            },
          }}
        >
          {content}
        </ReactMarkdown>
      )
    }
    
    // Render parts with collapsible sections
    return (
      <div>
        {parts.map((part, index) => {
          if (part.type === 'text') {
            return (
              <ReactMarkdown
                key={index}
                remarkPlugins={[remarkGfm]}
                components={{
                  // Enhanced table styling
                  table({ children, ...props }) {
                    return (
                      <div className="overflow-x-auto my-4">
                        <table className="w-full border-collapse border border-gray-600 bg-gray-800/50 rounded-lg" {...props}>
                          {children}
                        </table>
                      </div>
                    )
                  },
                  thead({ children, ...props }) {
                    return (
                      <thead className="bg-gray-700/50" {...props}>
                        {children}
                      </thead>
                    )
                  },
                  tbody({ children, ...props }) {
                    return (
                      <tbody {...props}>
                        {children}
                      </tbody>
                    )
                  },
                  tr({ children, ...props }) {
                    return (
                      <tr className="border-b border-gray-600 hover:bg-gray-700/30" {...props}>
                        {children}
                      </tr>
                    )
                  },
                  th({ children, ...props }) {
                    return (
                      <th className="border border-gray-600 px-3 py-2 text-left font-semibold text-teal-300" {...props}>
                        {children}
                      </th>
                    )
                  },
                  td({ children, ...props }) {
                    return (
                      <td className="border border-gray-600 px-3 py-2 text-gray-300" {...props}>
                        {children}
                      </td>
                    )
                  },
                  // Code highlighting
                  code({ node, inline, className, children, ...props }) {
                    const match = /language-(\w+)/.exec(className || '')
                    return !inline && match ? (
                      <SyntaxHighlighter
                        style={oneDark}
                        language={match[1]}
                        PreTag="div"
                        {...props}
                      >
                        {String(children).replace(/\n$/, '')}
                      </SyntaxHighlighter>
                    ) : (
                      <code className="bg-gray-700/50 px-1 py-0.5 rounded text-teal-300 text-sm" {...props}>
                        {children}
                      </code>
                    )
                  },
                }}
              >
                {part.content}
              </ReactMarkdown>
            )
          } else {
            // Collapsible section
            const isCollapsed = collapsedSections.has(part.id!)
            return (
              <div key={index} className="my-4 border border-gray-600 rounded-lg bg-gray-800/30">
                <button
                  onClick={() => toggleSection(part.id!)}
                  className="w-full text-left p-3 cursor-pointer font-semibold text-teal-300 hover:text-teal-200 hover:bg-gray-700/30 rounded-t-lg transition-colors flex items-center justify-between"
                >
                  <span>{part.title}</span>
                  <span className="material-icons text-sm transition-transform duration-200" style={{
                    transform: isCollapsed ? 'rotate(0deg)' : 'rotate(180deg)'
                  }}>
                    expand_more
                  </span>
                </button>
                {!isCollapsed && (
                  <div className="p-3 border-t border-gray-600">
                    <ReactMarkdown
                      remarkPlugins={[remarkGfm]}
                      components={{
                        // Enhanced table styling
                        table({ children, ...props }) {
                          return (
                            <div className="overflow-x-auto my-4">
                              <table className="w-full border-collapse border border-gray-600 bg-gray-800/50 rounded-lg" {...props}>
                                {children}
                              </table>
                            </div>
                          )
                        },
                        thead({ children, ...props }) {
                          return (
                            <thead className="bg-gray-700/50" {...props}>
                              {children}
                            </thead>
                          )
                        },
                        tbody({ children, ...props }) {
                          return (
                            <tbody {...props}>
                              {children}
                            </tbody>
                          )
                        },
                        tr({ children, ...props }) {
                          return (
                            <tr className="border-b border-gray-600 hover:bg-gray-700/30" {...props}>
                              {children}
                            </tr>
                          )
                        },
                        th({ children, ...props }) {
                          return (
                            <th className="border border-gray-600 px-3 py-2 text-left font-semibold text-teal-300" {...props}>
                              {children}
                            </th>
                          )
                        },
                        td({ children, ...props }) {
                          return (
                            <td className="border border-gray-600 px-3 py-2 text-gray-300" {...props}>
                              {children}
                            </td>
                          )
                        },
                        // Code highlighting
                        code({ node, inline, className, children, ...props }) {
                          const match = /language-(\w+)/.exec(className || '')
                          return !inline && match ? (
                            <SyntaxHighlighter
                              style={oneDark}
                              language={match[1]}
                              PreTag="div"
                              {...props}
                            >
                              {String(children).replace(/\n$/, '')}
                            </SyntaxHighlighter>
                          ) : (
                            <code className="bg-gray-700/50 px-1 py-0.5 rounded text-teal-300 text-sm" {...props}>
                              {children}
                            </code>
                          )
                        },
                      }}
                    >
                      {part.content}
                    </ReactMarkdown>
                  </div>
                )}
              </div>
            )
          }
        })}
      </div>
    )
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-400"></div>
      </div>
    )
  }

  return (
    <div className="flex h-[calc(100vh-8rem)] md:h-[calc(100vh-12rem)]">
      {/* Left Sidebar - Reports List */}
      <div className="w-80 border-r border-gray-700 bg-gray-800/50 flex flex-col">
        {/* Header */}
        <div className="p-4 border-b border-gray-700">
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-lg font-semibold text-white">üõ°Ô∏è Vulnerability Reports</h2>
            <button
              onClick={generateReport}
              disabled={generating}
              className="px-3 py-1 bg-teal-600 hover:bg-teal-500 text-white text-sm rounded disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-1"
            >
              {generating ? (
                <>
                  <div className="animate-spin rounded-full h-3 w-3 border-b border-white"></div>
                  <span>Generating...</span>
                </>
              ) : (
                <>
                  <span className="material-icons text-sm">refresh</span>
                  <span>Generate</span>
                </>
              )}
            </button>
          </div>
          <p className="text-sm text-gray-400">
            Daily vulnerability intelligence reports
          </p>
        </div>

        {/* Reports List */}
        <div className="flex-1 overflow-y-auto">
          {reports.length === 0 ? (
            <div className="p-4 text-center text-gray-400">
              <span className="material-icons text-4xl mb-2 block">security</span>
              <p>No reports available</p>
              <p className="text-sm mt-1">Generate your first vulnerability report</p>
            </div>
          ) : (
            <div className="space-y-1 p-2">
              {reports.map((report) => (
                <button
                  key={report.id}
                  onClick={() => loadReportContent(report.id)}
                  className={`w-full text-left p-3 rounded-lg border transition-all ${
                    selectedReport?.id === report.id
                      ? 'bg-teal-900/30 border-teal-600 text-teal-100'
                      : 'bg-gray-800/50 border-gray-700 text-gray-300 hover:bg-gray-700/50 hover:border-gray-600'
                  }`}
                >
                  <div className="flex items-start justify-between mb-2">
                    <h3 className="font-medium text-sm">{formatDate(report.report_date)}</h3>
                    {getPriorityBadge(report)}
                  </div>
                  
                  <div className="flex items-center space-x-3 text-xs text-gray-400">
                    <span>{report.vulnerabilities_count} vulns</span>
                    {report.critical_count > 0 && (
                      <span className="text-orange-400">{report.critical_count} critical</span>
                    )}
                    {report.kev_count > 0 && (
                      <span className="text-red-400">{report.kev_count} KEV</span>
                    )}
                  </div>
                  
                  {report.summary && (
                    <p className="text-xs text-gray-500 mt-1 line-clamp-2">
                      {report.summary}
                    </p>
                  )}
                </button>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Right Panel - Report Content */}
      <div className="flex-1 flex flex-col bg-gray-900/50">
        {selectedReport ? (
          <>
            {/* Report Header */}
            <div className="p-4 border-b border-gray-700">
              <div className="flex items-center justify-between mb-2">
                <h1 className="text-xl font-semibold text-white">{selectedReport.title}</h1>
                <div className="flex items-center space-x-2">
                  {getPriorityBadge(selectedReport)}
                  <span className="text-xs text-gray-400">
                    {formatDateTime(selectedReport.created_at)}
                  </span>
                </div>
              </div>
              
              {selectedReport.summary && (
                <p className="text-gray-300 text-sm">{selectedReport.summary}</p>
              )}
            </div>

            {/* Report Content */}
            <div className="flex-1 overflow-y-auto p-6">
              <div className="prose prose-invert prose-slate max-w-none">
                {renderVulnerabilityContent(selectedReport.content || 'No content available')}
              </div>
            </div>
          </>
        ) : (
          <div className="flex-1 flex items-center justify-center text-center">
            <div className="text-gray-400">
              <span className="material-icons text-6xl mb-4 block">shield</span>
              <h2 className="text-xl font-semibold mb-2">üõ°Ô∏è Vulnerability Watch</h2>
              <p className="text-sm mb-4">Select a report to view vulnerability details</p>
              {reports.length === 0 && (
                <button
                  onClick={generateReport}
                  disabled={generating}
                  className="px-4 py-2 bg-teal-600 hover:bg-teal-500 text-white rounded disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {generating ? 'Generating...' : 'Generate First Report'}
                </button>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default VulnerabilityWatch